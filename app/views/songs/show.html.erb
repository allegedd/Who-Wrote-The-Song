<div class="min-h-screen bg-gray-950 pt-8">
  <div class="container mx-auto px-4 max-w-4xl">
    <% if @song.present? %>
      <!-- 楽曲基本情報 -->
      <div class="bg-gray-900 rounded-lg p-6 mb-8 border border-gray-800">
        <div class="flex justify-between items-start">
          <div class="flex-1">
            <h1 class="text-3xl font-bold text-gray-100 mb-4">
              <%= @song.title %>
            </h1>
            <% if @song.artist.present? %>
              <p class="text-lg text-gray-300">
                アーティスト: <span class="text-gray-100 font-medium"><%= @song.artist %></span>
              </p>
            <% end %>
          </div>
          <button class="preview-btn ml-4 p-3 bg-gray-700 hover:bg-gray-600 text-white rounded-full transition-colors"
                  data-title="<%= @song.title %>"
                  data-artist="<%= @song.artist %>"
                  title="再生">
            <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 24 24">
              <path d="M8 5v14l11-7z"/>
            </svg>
          </button>
        </div>
      </div>

      <!-- クリエイター情報 -->
      <% if @song.same_creator? %>
        <!-- 作詞作曲が同じ人物 -->
        <div class="bg-gray-900 rounded-lg p-6 border border-gray-800">
          <% @song.composers.each do |composer| %>
            <div class="mb-6">
              <div class="flex items-center mb-4">
                <h2 class="text-xl font-semibold text-gray-100 mr-3">作詞作曲:</h2>
                <p class="text-lg text-gray-200 font-medium">
                  <%= composer[:name] %>
                </p>
              </div>
              
              <div class="border-t border-gray-800 pt-4">
                <h3 class="text-gray-400 mb-3">他の作品</h3>
                <% composer_data = @composer_works[composer[:name]] %>
                <% if composer_data && composer_data[:initial].any? %>
                  <div class="max-h-64 overflow-y-auto space-y-3" id="composer-<%= composer[:name].parameterize %>-inline-works">
                    <% composer_data[:initial].each do |work| %>
                      <%= render 'work_item', work: work %>
                    <% end %>
                  </div>
                  <% if composer_data[:has_more] %>
                    <div class="mt-4 text-center">
                      <%= button_tag "もっと見る", 
                          type: "button",
                          class: "text-green-500 hover:text-green-400 font-medium transition-colors duration-200 text-sm",
                          data: { 
                            artist_id: composer_data[:mbid],
                            artist_name: composer[:name],
                            artist_type: "composer",
                            current_song_id: @song.id,
                            target: "composer-#{composer[:name].parameterize}-inline-works"
                          },
                          onclick: "loadMoreWorks(this)" %>
                    </div>
                  <% end %>
                <% else %>
                  <div class="text-gray-500 text-center py-4">
                    <p class="text-sm">他の作品が見つかりませんでした</p>
                  </div>
                <% end %>
              </div>
            </div>
          <% end %>
        </div>
      <% else %>
        <!-- 作曲家セクション -->
        <% if @song.composers.present? %>
          <div class="bg-gray-900 rounded-lg p-6 mb-6 border border-gray-800">
            <% @song.composers.each do |composer| %>
              <div class="mb-6 last:mb-0">
                <div class="flex items-center mb-4">
                  <h2 class="text-xl font-semibold text-gray-100 mr-3">作曲:</h2>
                  <p class="text-lg text-gray-200 font-medium">
                    <%= composer[:name] %>
                  </p>
                </div>
                
                <div class="border-t border-gray-800 pt-4">
                  <h3 class="text-gray-400 mb-3">他の作品</h3>
                  <% composer_data = @composer_works[composer[:name]] %>
                  <% if composer_data && composer_data[:initial].any? %>
                    <div class="max-h-64 overflow-y-auto space-y-3" id="composer-<%= composer[:name].parameterize %>-separate-works">
                      <% composer_data[:initial].each do |work| %>
                        <%= render 'work_item', work: work %>
                      <% end %>
                    </div>
                    <% if composer_data[:has_more] %>
                      <div class="mt-4 text-center">
                        <%= button_tag "もっと見る", 
                            type: "button",
                            class: "text-green-500 hover:text-green-400 font-medium transition-colors duration-200 text-sm",
                            data: { 
                              artist_id: composer_data[:mbid],
                              artist_name: composer[:name],
                              artist_type: "composer",
                              current_song_id: @song.id,
                              target: "composer-#{composer[:name].parameterize}-separate-works"
                            },
                            onclick: "loadMoreWorks(this)" %>
                      </div>
                    <% end %>
                  <% else %>
                    <div class="text-gray-500 text-center py-4">
                      <p class="text-sm">他の作品が見つかりませんでした</p>
                    </div>
                  <% end %>
                </div>
              </div>
            <% end %>
          </div>
        <% end %>

        <!-- 作詞家セクション -->
        <% if @song.lyricists.present? %>
          <div class="bg-gray-900 rounded-lg p-6 border border-gray-800">
            <% @song.lyricists.each do |lyricist| %>
              <div class="mb-6 last:mb-0">
                <div class="flex items-center mb-4">
                  <h2 class="text-xl font-semibold text-gray-100 mr-3">作詞:</h2>
                  <p class="text-lg text-gray-200 font-medium">
                    <%= lyricist[:name] %>
                  </p>
                </div>
                
                <div class="border-t border-gray-800 pt-4">
                  <h3 class="text-gray-400 mb-3">他の作品</h3>
                  <% lyricist_data = @lyricist_works[lyricist[:name]] %>
                  <% if lyricist_data && lyricist_data[:initial].any? %>
                    <div class="max-h-64 overflow-y-auto space-y-3" id="lyricist-<%= lyricist[:name].parameterize %>-separate-works">
                      <% lyricist_data[:initial].each do |work| %>
                        <%= render 'work_item', work: work %>
                      <% end %>
                    </div>
                    <% if lyricist_data[:has_more] %>
                      <div class="mt-4 text-center">
                        <%= button_tag "もっと見る", 
                            type: "button",
                            class: "text-green-500 hover:text-green-400 font-medium transition-colors duration-200 text-sm",
                            data: { 
                              artist_id: lyricist_data[:mbid],
                              artist_name: lyricist[:name],
                              artist_type: "lyricist",
                              current_song_id: @song.id,
                              target: "lyricist-#{lyricist[:name].parameterize}-separate-works"
                            },
                            onclick: "loadMoreWorks(this)" %>
                      </div>
                    <% end %>
                  <% else %>
                    <div class="text-gray-500 text-center py-4">
                      <p class="text-sm">他の作品が見つかりませんでした</p>
                    </div>
                  <% end %>
                </div>
              </div>
            <% end %>
          </div>
        <% end %>
      <% end %>

      <!-- クリエイター情報なし -->
      <% if @song.composers.blank? && @song.lyricists.blank? %>
        <div class="bg-gray-900 rounded-lg p-8 text-center border border-gray-800">
          <p class="text-gray-400 mb-4">
            作曲家・作詞家の情報がまだ登録されていません。
          </p>
        </div>
      <% end %>
    <% end %>


    <!-- 戻るボタン -->
    <div class="mt-8 text-center">
      <%= link_to "検索画面に戻る", root_path, class: "text-green-500 hover:text-green-400 font-medium" %>
    </div>
  </div>
</div>

<!-- YouTube フローティングプレイヤー -->
<div id="youtube-floating-player" class="fixed bottom-4 right-4 w-96 bg-gray-900 rounded-lg shadow-2xl border border-gray-700 z-50 hidden">
  <!-- ヘッダー -->
  <div class="flex items-center justify-between p-3 border-b border-gray-700">
    <div class="flex items-center space-x-2 min-w-0 flex-1">
      <svg class="w-5 h-5 text-red-500 flex-shrink-0" fill="currentColor" viewBox="0 0 24 24">
        <path d="M23.498 6.186a3.016 3.016 0 0 0-2.122-2.136C19.505 3.545 12 3.545 12 3.545s-7.505 0-9.377.505A3.017 3.017 0 0 0 .502 6.186C0 8.07 0 12 0 12s0 3.93.502 5.814a3.016 3.016 0 0 0 2.122 2.136c1.871.505 9.376.505 9.376.505s7.505 0 9.377-.505a3.015 3.015 0 0 0 2.122-2.136C24 15.93 24 12 24 12s0-3.93-.502-5.814zM9.545 15.568V8.432L15.818 12l-6.273 3.568z"/>
      </svg>
      <span id="player-title" class="text-sm font-medium text-gray-100 truncate block" style="max-width: calc(100% - 2rem);"></span>
    </div>
    <div class="flex items-center space-x-1 flex-shrink-0 ml-2">
      <button id="minimize-player" class="p-2 text-gray-400 hover:text-white hover:bg-gray-800 rounded transition-colors">
        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"/>
        </svg>
      </button>
      <button id="close-player" class="p-2 text-gray-400 hover:text-white hover:bg-gray-800 rounded transition-colors">
        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
        </svg>
      </button>
    </div>
  </div>

  <!-- コンテンツエリア -->
  <div id="player-content" class="transition-all duration-300">
    <!-- 検索結果リスト -->
    <div id="videos-list" class="max-h-64 overflow-y-auto">
      <div id="loading-spinner" class="text-center py-8">
        <div class="animate-spin rounded-full h-6 w-6 border-b-2 border-red-500 mx-auto"></div>
        <p class="text-gray-400 mt-2 text-sm">動画を検索中...</p>
      </div>
    </div>

    <!-- プレイヤーエリア -->
    <div id="player-area" class="hidden">
      <div class="aspect-video bg-black">
        <iframe id="youtube-iframe" width="100%" height="100%" frameborder="0"
                allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"
                allowfullscreen>
        </iframe>
      </div>
    </div>
  </div>
</div>

<script>
  console.log('Script loaded successfully');
  
  function loadInitialWorks(button) {
    const artistId = button.dataset.artistId;
    const artistName = button.dataset.artistName;
    const artistType = button.dataset.artistType;
    const currentSongId = button.dataset.currentSongId;
    const targetId = button.dataset.target;
    
    // ローディング表示
    button.innerHTML = '読み込み中...';
    button.disabled = true;
    button.classList.add('opacity-50');
    
    // Ajax リクエスト（最初の5件）
    fetch(`/songs/artist_works?artist_id=${artistId}&artist_type=${artistType}&current_song_id=${currentSongId}&offset=0`, {
      headers: {
        'Accept': 'application/json',
        'X-Requested-With': 'XMLHttpRequest',
        'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
      }
    })
    .then(response => response.json())
    .then(data => {
      const container = document.getElementById(targetId);
      const initialButton = document.getElementById(`${targetId.replace('-works', '-initial')}`);
      const moreButtonContainer = document.getElementById(`${targetId.replace('-works', '-more-button')}`);
      
      // 初期の5件を表示
      const worksToShow = data.works.slice(0, 5);
      worksToShow.forEach(work => {
        const workDiv = createWorkElement(work);
        container.appendChild(workDiv);
      });
      
      // コンテナを表示
      container.classList.remove('hidden');
      // 初期ボタンを非表示
      initialButton.style.display = 'none';
      
      // 5件以上ある場合は「もっと見る」ボタンを表示
      if (data.works.length > 5) {
        moreButtonContainer.classList.remove('hidden');
      }
    })
    .catch(error => {
      console.error('Error loading initial works:', error);
      button.innerHTML = 'もっと見る';
      button.disabled = false;
      button.classList.remove('opacity-50');
      alert('作品の読み込みに失敗しました。');
    });
  }

  // loadAllWorksは削除（もっと見るに統一）

  function loadMoreWorks(button) {
    const artistId = button.dataset.artistId;
    const artistName = button.dataset.artistName;
    const artistType = button.dataset.artistType;
    const currentSongId = button.dataset.currentSongId;
    const targetId = button.dataset.target;
    
    // 既に表示されている作品数を取得
    const existingWorks = document.querySelectorAll(`#${targetId} .work-item`).length;
    
    // ローディング表示の改善
    const loadingSpan = document.getElementById(`${targetId}-loading`);
    if (loadingSpan) {
      loadingSpan.classList.remove('hidden');
    }
    button.innerHTML = '読み込み中... <span class="animate-pulse">⏳</span>';
    button.disabled = true;
    button.classList.add('opacity-70');
    
    // Ajax リクエスト
    fetch(`/songs/artist_works?artist_id=${artistId}&artist_type=${artistType}&current_song_id=${currentSongId}&offset=${existingWorks}`, {
      headers: {
        'Accept': 'application/json',
        'X-Requested-With': 'XMLHttpRequest',
        'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
      }
    })
    .then(response => response.json())
    .then(data => {
      const container = document.getElementById(targetId);
      
      // 新しい作品を追加（10件分）
      const fragment = document.createDocumentFragment();
      data.works.forEach(work => {
        const workDiv = createWorkElement(work);
        fragment.appendChild(workDiv);
      });
      container.appendChild(fragment);
      
      // 新しく追加された要素のアーティスト情報を段階的に読み込み
      const newElements = container.querySelectorAll('.work-item .artist-loading');
      if (newElements.length > 0) {
        const songIds = Array.from(newElements).map(el => 
          el.closest('[data-artist-info]').dataset.artistInfo
        );
        // 段階的読み込みでUX改善
        loadArtistsProgressively(songIds);
      }
      
      // ローディング非表示
      if (loadingSpan) {
        loadingSpan.classList.add('hidden');
      }
      
      // 全て表示したらボタンを非表示
      if (!data.has_more) {
        // ボタンの親要素（divコンテナ）を削除
        const buttonContainer = button.parentElement;
        if (buttonContainer) {
          buttonContainer.remove();
        }
      } else {
        button.innerHTML = 'もっと見る';
        button.disabled = false;
        button.classList.remove('opacity-70');
      }
    })
    .catch(error => {
      console.error('Error loading more works:', error);
      if (loadingSpan) {
        loadingSpan.classList.add('hidden');
      }
      button.innerHTML = 'もっと見る';
      button.disabled = false;
      button.classList.remove('opacity-70');
      alert('作品の読み込みに失敗しました。');
    });
  }
  
  function createWorkElement(work) {
    const div = document.createElement('div');
    div.className = 'bg-gray-800 rounded-lg p-4 work-item';
    
    // _work_item.html.erbパーシャルと完全に同じ構造を作成
    let content = `
      <div class="flex justify-between items-start mb-2">
        <h3 class="font-medium text-gray-100 flex-1">${escapeHtml(work.title)}</h3>
        <button class="preview-btn ml-3 p-2 bg-gray-700 hover:bg-gray-600 text-white rounded-full transition-colors"
                data-title="${escapeHtml(work.title)}"
                data-artist="${escapeHtml(work.artist || '')}"
                title="再生">
          <svg class="w-4 h-4" fill="currentColor" viewBox="0 0 24 24">
            <path d="M8 5v14l11-7z"/>
          </svg>
        </button>
      </div>
    `;
    
    // アーティスト情報（_work_item.html.erbと同じ構造）
    content += `<p class="text-sm text-gray-400 mb-2" data-artist-info="${work.id}">
      アーティスト: <span class="text-gray-300 artist-name">${work.artist || '読み込み中...'}</span>
      ${(!work.artist || work.artist === '') ? '<span class="artist-loading text-gray-500 text-xs ml-1">🔄</span>' : ''}
    </p>`;
    
    if (work.creator_names) {
      content += `<p class="text-sm text-gray-400">${escapeHtml(work.creator_names)}</p>`;
    }
    
    div.innerHTML = content;
    
    
    return div;
  }

  // アーティスト情報を段階的に読み込む関数（UX最適化版）
  function loadArtistsProgressively(songIds) {
    if (songIds.length === 0) return;
    
    // より小さなバッチサイズでスムーズな表示
    const batchSize = 8; // バッチサイズを削減してより頻繁に更新
    
    // 最初のバッチを即座に処理
    const firstBatch = songIds.slice(0, batchSize);
    if (firstBatch.length > 0) {
      loadArtistsForElements(firstBatch);
    }
    
    // 残りがある場合はより短い間隔で処理
    const remainingSongIds = songIds.slice(batchSize);
    if (remainingSongIds.length > 0) {
      setTimeout(() => {
        loadArtistsProgressively(remainingSongIds);
      }, 100); // 0.1秒待機でより滑らかな表示
    }
  }
  
  // 複数要素のアーティスト情報を一括で読み込む関数
  function loadArtistsForElements(songIds) {
    if (songIds.length === 0) return;
    
    fetch(`/songs/load_artists?song_ids=${songIds.join(',')}`, {
      headers: {
        'Accept': 'application/json',
        'X-Requested-With': 'XMLHttpRequest',
        'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
      }
    })
    .then(response => response.json())
    .then(data => {
      data.artists.forEach(artist => {
        const elements = document.querySelectorAll(`[data-artist-info="${artist.id}"]`);
        elements.forEach(element => {
          const nameSpan = element.querySelector('.artist-name');
          const loadingSpan = element.querySelector('.artist-loading');
          
          if (nameSpan) {
            nameSpan.textContent = artist.artist;
            // 取得完了の視覚的フィードバック
            nameSpan.classList.add('text-green-300');
            setTimeout(() => {
              nameSpan.classList.remove('text-green-300');
              nameSpan.classList.add('text-gray-300');
            }, 1000);
          }
          if (loadingSpan) {
            loadingSpan.remove();
          }

          // 同じwork-item内の再生ボタンのdata-artist属性も更新
          const workItem = element.closest('.work-item');
          if (workItem) {
            const previewBtn = workItem.querySelector('.preview-btn');
            if (previewBtn && artist.artist) {
              previewBtn.dataset.artist = artist.artist;
              console.log(`Updated preview button artist for work ${artist.id}: ${artist.artist}`);
            }
          }
        });
      });
    })
    .catch(error => {
      console.error('アーティスト情報の読み込みに失敗しました:', error);
    });
  }

  // 単一要素のアーティスト情報を読み込む関数（下位互換のため残す）
  function loadArtistForElement(songId) {
    loadArtistsForElements([songId]);
  }

  function escapeHtml(text) {
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
  }

  // アーティスト情報の非同期読み込み（work_item用）
  // 重複実行防止のためのフラグ
  let artistLoadingInProgress = false;
  
  // Turbo対応のイベントリスナー
  function loadArtistsOnPageLoad() {
    console.log('loadArtistsOnPageLoad called');
    
    // 既に読み込み中の場合は実行しない
    if (artistLoadingInProgress) {
      console.log('Artist loading already in progress, skipping...');
      return;
    }
    
    // 少し待ってから実行（DOMの完全な構築を待つ）
    setTimeout(function() {
      // 再度チェック（setTimeout後に他の処理が開始されている可能性）
      if (artistLoadingInProgress) {
        console.log('Artist loading started by another process, skipping...');
        return;
      }
      
      console.log('Starting artist loading process...');
      artistLoadingInProgress = true;
      
      const artistElements = document.querySelectorAll('[data-artist-info]');
      console.log(`Found ${artistElements.length} total elements with data-artist-info`);
      
      const loadingArtists = Array.from(artistElements).filter(el => 
        el.querySelector('.artist-loading')
      );

      console.log(`Found ${loadingArtists.length} elements with loading artists`);

      if (loadingArtists.length > 0) {
        // 読み込み中のアーティスト情報のIDを収集
        const songIds = loadingArtists.map(el => el.dataset.artistInfo);
        console.log('Loading artists for song IDs:', songIds);
        
        // 非同期でアーティスト情報を取得
        fetch(`/songs/load_artists?song_ids=${songIds.join(',')}`, {
        headers: {
          'Accept': 'application/json',
          'X-Requested-With': 'XMLHttpRequest',
          'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
        }
      })
      .then(response => response.json())
      .then(data => {
        console.log('Received artist data:', data);
        // アーティスト情報を更新
        data.artists.forEach(artist => {
          const elements = document.querySelectorAll(`[data-artist-info="${artist.id}"]`);
          console.log(`Updating ${elements.length} elements for song ${artist.id}`);
          elements.forEach(element => {
            const nameSpan = element.querySelector('.artist-name');
            const loadingSpan = element.querySelector('.artist-loading');
            
            if (nameSpan) {
              nameSpan.textContent = artist.artist;
            }
            if (loadingSpan) {
              loadingSpan.remove();
            }
            
            // 同じwork-item内の再生ボタンのdata-artist属性も更新
            const workItem = element.closest('.work-item');
            if (workItem) {
              const previewBtn = workItem.querySelector('.preview-btn');
              if (previewBtn && artist.artist) {
                previewBtn.dataset.artist = artist.artist;
                console.log(`Updated preview button artist for work ${artist.id}: ${artist.artist}`);
              }
            }
          });
        });
        // 処理完了後にフラグをリセット
        artistLoadingInProgress = false;
      })
      .catch(error => {
        console.error('アーティスト情報の読み込みに失敗しました:', error);
        // エラー時は読み込み中アイコンを削除
        loadingArtists.forEach(el => {
          const loadingSpan = el.querySelector('.artist-loading');
          if (loadingSpan) {
            loadingSpan.remove();
          }
        });
        // エラー時もフラグをリセット
        artistLoadingInProgress = false;
      });
      } else {
        // 読み込み対象がない場合もフラグをリセット
        artistLoadingInProgress = false;
      }
    }, 300); // 0.3秒待機に短縮してからアーティスト情報を読み込み
  }

  // ページ遷移時にフラグをリセット
  document.addEventListener('turbo:before-visit', function() {
    artistLoadingInProgress = false;
  });
  
  // 複数のイベントに対応（Turbo対応）
  document.addEventListener('DOMContentLoaded', loadArtistsOnPageLoad);
  document.addEventListener('turbo:load', loadArtistsOnPageLoad);
  document.addEventListener('turbo:render', loadArtistsOnPageLoad);
  
  // 即座に実行も試す（既にDOMが読み込まれている場合）
  if (document.readyState === 'loading') {
    console.log('Document is loading');
  } else {
    console.log('Document already loaded, executing immediately');
    loadArtistsOnPageLoad();
  }

  // YouTube フローティングプレイヤー機能（詳細ページ版）
  let isYouTubePlayerInitialized = false;
  let previewClickListenerAdded = false;
  
  function initYouTubeFloatingPlayer() {
    console.log('[TURBO DEBUG] initYouTubeFloatingPlayer called, isYouTubePlayerInitialized:', isYouTubePlayerInitialized);
    
    if (isYouTubePlayerInitialized) {
      console.log('[TURBO DEBUG] Already initialized, skipping...');
      return;
    }
    
    const player = document.getElementById('youtube-floating-player');
    const playerTitle = document.getElementById('player-title');
    const videosList = document.getElementById('videos-list');
    const playerArea = document.getElementById('player-area');
    const playerContent = document.getElementById('player-content');
    const youtubeIframe = document.getElementById('youtube-iframe');
    const closeButton = document.getElementById('close-player');
    const minimizeButton = document.getElementById('minimize-player');
    
    console.log('[TURBO DEBUG] DOM elements check:', {
      player: !!player,
      playerTitle: !!playerTitle,
      videosList: !!videosList,
      playerArea: !!playerArea,
      playerContent: !!playerContent,
      youtubeIframe: !!youtubeIframe,
      closeButton: !!closeButton,
      minimizeButton: !!minimizeButton
    });
    
    let isMinimized = false;
    
    // 初期化完了フラグを設定
    isYouTubePlayerInitialized = true;
    console.log('[TURBO DEBUG] Initialization completed');

    // 再生ボタンのクリックイベント（イベントデリゲーション）
    if (!previewClickListenerAdded) {
      previewClickListenerAdded = true;
      document.addEventListener('click', function(e) {
        const previewBtn = e.target.closest('.preview-btn');
        if (previewBtn) {
          console.log('[TURBO DEBUG] Preview button clicked:', previewBtn);
          console.log('[TURBO DEBUG] Current state:', {
            isYouTubePlayerInitialized,
            previewClickListenerAdded,
            playerExists: !!document.getElementById('youtube-floating-player')
          });
          
          e.preventDefault();
          e.stopPropagation();
          
          const title = previewBtn.dataset.title;
          const artist = previewBtn.dataset.artist;
          
          console.log('[TURBO DEBUG] Button data:', { title, artist });
          
          if (!title) {
            console.log('[TURBO DEBUG] No title, returning');
            return;
          }
          
          console.log('[TURBO DEBUG] Calling openFloatingPlayer');
          openFloatingPlayer(title, artist);
        }
      });
      console.log('[TURBO DEBUG] Click listener added');
    }

    // フローティングプレイヤーを開く
    function openFloatingPlayer(title, artist) {
      console.log('[TURBO DEBUG] openFloatingPlayer called with:', { title, artist });
      
      // DOM要素を再取得（Turbo遷移で変わる可能性があるため）
      const currentPlayer = document.getElementById('youtube-floating-player');
      const currentPlayerTitle = document.getElementById('player-title');
      const currentVideosList = document.getElementById('videos-list');
      
      console.log('[TURBO DEBUG] Current DOM elements:', {
        player: !!currentPlayer,
        playerTitle: !!currentPlayerTitle,
        videosList: !!currentVideosList,
        originalPlayer: !!player,
        originalPlayerTitle: !!playerTitle,
        originalVideosList: !!videosList
      });
      
      if (!currentPlayer || !currentPlayerTitle || !currentVideosList) {
        console.log('[TURBO DEBUG] Missing DOM elements, cannot open player');
        return;
      }
      
      currentPlayerTitle.textContent = `"${title}" の再生`;
      currentPlayer.classList.remove('hidden');
      console.log('[TURBO DEBUG] Player shown');
      
      // リストビューにリセット
      showVideosList();
      
      // ローディング表示
      currentVideosList.innerHTML = '<div id="loading-spinner" class="text-center py-8"><div class="animate-spin rounded-full h-6 w-6 border-b-2 border-red-500 mx-auto"></div><p class="text-gray-400 mt-2 text-sm">動画を検索中...</p></div>';
      console.log('[TURBO DEBUG] Loading spinner set');

      // YouTube検索
      console.log('[TURBO DEBUG] Starting YouTube search');
      searchYouTubeVideos(title, artist);
    }
    
    // 動画リスト表示
    window.showVideosList = function showVideosList() {
      console.log('[TURBO DEBUG] showVideosList called');
      // DOM要素を再取得（Turbo遷移対応）
      const currentVideosList = document.getElementById('videos-list');
      const currentPlayerArea = document.getElementById('player-area');
      
      console.log('[TURBO DEBUG] showVideosList elements:', {
        videosList: !!currentVideosList,
        playerArea: !!currentPlayerArea,
        originalVideosList: !!videosList,
        originalPlayerArea: !!playerArea
      });
      
      if (currentVideosList && currentPlayerArea) {
        currentVideosList.classList.remove('hidden');
        currentPlayerArea.classList.add('hidden');
        isMinimized = false;
        updateMinimizeButton();
        console.log('[TURBO DEBUG] showVideosList completed');
      } else {
        console.log('[TURBO DEBUG] showVideosList failed - missing elements');
      }
    }
    
    // プレイヤー表示
    window.showPlayer = function showPlayer() {
      console.log('[TURBO DEBUG] showPlayer called');
      // DOM要素を再取得（Turbo遷移対応）
      const currentVideosList = document.getElementById('videos-list');
      const currentPlayerArea = document.getElementById('player-area');
      
      if (currentVideosList && currentPlayerArea) {
        currentVideosList.classList.add('hidden');
        currentPlayerArea.classList.remove('hidden');
        updateMinimizeButton();
        console.log('[TURBO DEBUG] showPlayer completed');
      } else {
        console.log('[TURBO DEBUG] showPlayer failed - missing elements');
      }
    }

    // YouTube動画を検索
    let isSearching = false;
    function searchYouTubeVideos(title, artist) {
      // 既に検索中の場合はスキップ
      if (isSearching) {
        return;
      }
      
      isSearching = true;
      const params = new URLSearchParams({
        title: title,
        artist: artist || ''
      });
      
      const url = `/songs/youtube_search?${params}`;

      fetch(url, {
        headers: {
          'Accept': 'application/json',
          'X-Requested-With': 'XMLHttpRequest',
          'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
        }
      })
      .then(response => {
        if (!response.ok) {
          throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }
        return response.json();
      })
      .then(data => {
        // DOM要素を再取得（Turbo遷移対応）
        const currentVideosList = document.getElementById('videos-list');
        if (!currentVideosList) {
          console.log('[TURBO DEBUG] videosList not found in response handler');
          return;
        }
        
        if (data.error) {
          // APIエラーの場合
          if (data.error.includes('制限') || data.error.includes('quota')) {
            currentVideosList.innerHTML = '<div class="text-center py-8 text-red-400 text-sm">YouTube APIの利用制限に達しました。しばらく時間をおいてから再度お試しください。</div>';
          } else {
            currentVideosList.innerHTML = `<div class="text-center py-8 text-red-400 text-sm">エラー: ${data.error}</div>`;
          }
        } else if (data.videos && data.videos.length > 0) {
          displayVideosList(data.videos);
        } else {
          currentVideosList.innerHTML = '<div class="text-center py-8 text-gray-400 text-sm">関連する動画が見つかりませんでした</div>';
        }
        isSearching = false;
      })
      .catch(error => {
        // DOM要素を再取得（Turbo遷移対応）
        const currentVideosList = document.getElementById('videos-list');
        if (currentVideosList) {
          currentVideosList.innerHTML = `<div class="text-center py-8 text-red-400 text-sm">動画の検索に失敗しました: ${error.message}</div>`;
        }
        isSearching = false;
      });
    }

    // 動画リストを表示（コンパクト版）
    function displayVideosList(videos) {
      console.log('[TURBO DEBUG] displayVideosList called');
      // DOM要素を再取得（Turbo遷移対応）
      const currentVideosList = document.getElementById('videos-list');
      
      if (!currentVideosList) {
        console.log('[TURBO DEBUG] videosList not found in displayVideosList');
        return;
      }
      
      if (!videos || videos.length === 0) {
        currentVideosList.innerHTML = '<div class="text-center py-8 text-gray-400 text-sm">関連する動画が見つかりませんでした</div>';
        return;
      }

      const videosHtml = videos.map((video) => {
        return `
          <div class="border-b border-gray-700 last:border-b-0 p-3 hover:bg-gray-800 cursor-pointer video-item"
               data-video-id="${video.video_id}"
               data-video-title="${escapeHtml(video.title)}">
            <div class="flex space-x-3">
              <img src="${video.thumbnail_url}" alt="Thumbnail" class="w-16 h-12 object-cover rounded flex-shrink-0">
              <div class="flex-1 min-w-0">
                <h4 class="text-white text-sm font-medium mb-1 line-clamp-2">${escapeHtml(video.title)}</h4>
                <p class="text-gray-400 text-xs">${escapeHtml(video.channel_title)}</p>
              </div>
              <div class="flex-shrink-0">
                <svg class="w-5 h-5 text-red-500" fill="currentColor" viewBox="0 0 24 24">
                  <path d="M8 5v14l11-7z"/>
                </svg>
              </div>
            </div>
          </div>
        `;
      }).join('');

      currentVideosList.innerHTML = videosHtml;
      setupVideoClickEvents();
      console.log('[TURBO DEBUG] displayVideosList completed');
    }

    // 動画アイテムのクリックイベント（グローバルに一度だけ設定）
    function setupVideoClickEvents() {
      console.log('[TURBO DEBUG] setupVideoClickEvents called');
      // DOM要素を再取得（Turbo遷移対応）
      const currentVideosList = document.getElementById('videos-list');
      
      if (!currentVideosList) {
        console.log('[TURBO DEBUG] videosList not found in setupVideoClickEvents');
        return;
      }
      
      // 既存のイベントリスナーを削除してから新しく追加
      currentVideosList.removeEventListener('click', handleVideoClick);
      currentVideosList.addEventListener('click', handleVideoClick);
      console.log('[TURBO DEBUG] setupVideoClickEvents completed');
    }
    
    function handleVideoClick(e) {
      const videoItem = e.target.closest('.video-item');
      if (videoItem) {
        const videoId = videoItem.dataset.videoId;
        const videoTitle = videoItem.dataset.videoTitle;
        playVideoInPlayer(videoId, videoTitle);
      }
    }
    

    // プレイヤーで動画を再生（グローバルスコープでも利用可能にする）
    window.playVideoInPlayer = function playVideoInPlayer(videoId, videoTitle) {
      const embedUrl = `https://www.youtube.com/embed/${videoId}?autoplay=1`;
      
      // iframeのsrcを設定
      youtubeIframe.src = embedUrl;
      
      // タイトルを更新
      playerTitle.textContent = videoTitle;
      
      // プレイヤービューに切り替え
      window.showPlayer();
    }
    
    // 最小化/復元機能
    function updateMinimizeButton() {
      const minimizeIcon = minimizeButton.querySelector('svg path');
      if (isMinimized) {
        // 復元アイコン（上向き矢印）
        minimizeIcon.setAttribute('d', 'M5 15l7-7 7 7');
        playerContent.style.height = '0';
        playerContent.style.overflow = 'hidden';
      } else {
        // 最小化アイコン（下向き矢印）
        minimizeIcon.setAttribute('d', 'M19 9l-7 7-7-7');
        playerContent.style.height = 'auto';
        playerContent.style.overflow = 'visible';
      }
    }
    
    // 最小化ボタンのクリックイベント
    minimizeButton.addEventListener('click', function() {
      isMinimized = !isMinimized;
      updateMinimizeButton();
    });
    
    // 閉じるボタンのクリックイベント
    closeButton.addEventListener('click', function() {
      player.classList.add('hidden');
      // プレイヤーをリセット
      youtubeIframe.src = '';
      isMinimized = false;
      updateMinimizeButton();
    });
    
    // ESCキーでプレイヤーを閉じる
    document.addEventListener('keydown', function(e) {
      if (e.key === 'Escape' && !player.classList.contains('hidden')) {
        closeButton.click();
      }
    });

  }

  // Turbo遷移時にフラグをリセット
  document.addEventListener('turbo:before-visit', function() {
    console.log('[TURBO DEBUG] turbo:before-visit fired');
    isYouTubePlayerInitialized = false;
    // previewClickListenerAddedはリセットしない（グローバルなイベントリスナーのため）
  });

  // YouTube フローティングプレイヤーを初期化
  document.addEventListener('DOMContentLoaded', function() {
    console.log('[TURBO DEBUG] DOMContentLoaded fired');
    initYouTubeFloatingPlayer();
  });
  document.addEventListener('turbo:load', function() {
    console.log('[TURBO DEBUG] turbo:load fired');
    initYouTubeFloatingPlayer();
  });

</script>
